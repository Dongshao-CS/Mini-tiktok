// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: message.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessageService_MessageChat_FullMethodName      = "/MessageService/MessageChat"
	MessageService_MessageAction_FullMethodName    = "/MessageService/MessageAction"
	MessageService_NewestMessageDic_FullMethodName = "/MessageService/NewestMessageDic"
)

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	// 接受消息
	MessageChat(ctx context.Context, in *MessageChatReq, opts ...grpc.CallOption) (*MessageChatRsp, error)
	// 发送消息
	MessageAction(ctx context.Context, in *MessageActionReq, opts ...grpc.CallOption) (*MessageActionRsp, error)
	// 查询最新的一条信息
	NewestMessageDic(ctx context.Context, in *NewestMessageReq, opts ...grpc.CallOption) (*NewestMessageRsp, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) MessageChat(ctx context.Context, in *MessageChatReq, opts ...grpc.CallOption) (*MessageChatRsp, error) {
	out := new(MessageChatRsp)
	err := c.cc.Invoke(ctx, MessageService_MessageChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) MessageAction(ctx context.Context, in *MessageActionReq, opts ...grpc.CallOption) (*MessageActionRsp, error) {
	out := new(MessageActionRsp)
	err := c.cc.Invoke(ctx, MessageService_MessageAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) NewestMessageDic(ctx context.Context, in *NewestMessageReq, opts ...grpc.CallOption) (*NewestMessageRsp, error) {
	out := new(NewestMessageRsp)
	err := c.cc.Invoke(ctx, MessageService_NewestMessageDic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	// 接受消息
	MessageChat(context.Context, *MessageChatReq) (*MessageChatRsp, error)
	// 发送消息
	MessageAction(context.Context, *MessageActionReq) (*MessageActionRsp, error)
	// 查询最新的一条信息
	NewestMessageDic(context.Context, *NewestMessageReq) (*NewestMessageRsp, error)
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) MessageChat(context.Context, *MessageChatReq) (*MessageChatRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageChat not implemented")
}
func (UnimplementedMessageServiceServer) MessageAction(context.Context, *MessageActionReq) (*MessageActionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageAction not implemented")
}
func (UnimplementedMessageServiceServer) NewestMessageDic(context.Context, *NewestMessageReq) (*NewestMessageRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewestMessageDic not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_MessageChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).MessageChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_MessageChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).MessageChat(ctx, req.(*MessageChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_MessageAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).MessageAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_MessageAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).MessageAction(ctx, req.(*MessageActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_NewestMessageDic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewestMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).NewestMessageDic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_NewestMessageDic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).NewestMessageDic(ctx, req.(*NewestMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MessageChat",
			Handler:    _MessageService_MessageChat_Handler,
		},
		{
			MethodName: "MessageAction",
			Handler:    _MessageService_MessageAction_Handler,
		},
		{
			MethodName: "NewestMessageDic",
			Handler:    _MessageService_NewestMessageDic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
